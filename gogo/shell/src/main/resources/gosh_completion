#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

__option_not_present = {
	res = true
	opts = ([ $args ] get 0)
	each $opts {
		arg = $it
		each ($.commandLine words) {
			if { ($it toString) contentEquals ($arg toString) } {
				res = false
			}
		}
	}
	$res
}

__load_class = {
	(($.reader class) classLoader) loadClass $1
}

__as_list = {
	(__load_class java.util.Arrays) asList $1
}

__set_unset_arguments = {
	is_setopt = (($.commandLine words) get 0) equals "setopt"
	enums = ((__load_class 'org.jline.ConsoleReader$Option') enumConstants)
	candidates = new ArrayList
	each (__as_list $enums) {
		name = ((($it name) toLowerCase) replace '_' '-')
		is_set = ($.reader isSet $it)
		neg = %(( if(is_setopt, is_set, not(is_set)) ))
		if { $neg } {
			name = "no-${name}"
		}
		if { not  { (($.commandLine words) subList 1 ($.commandLine wordIndex)) contains $name } } {
			$candidates add (new org.jline.Candidate $name $name (if { $neg } { "unset" } { "set" }) null null null true)
		}
	}
	$candidates
}

setopt pad-prompts
setopt group

complete -c gogo:complete -e
complete -c gogo:complete -d "Edit command specific completions"
complete -c gogo:complete -s c -l command --description "Command to add completion to" -n '__option_not_present -c --command' -a '$.commands'
complete -c gogo:complete -s s -l short-option --description "Posix-style option to complete" -n '__option_not_present -s --short-option'
complete -c gogo:complete -s l -l long-option --description "GNU-style option to complete" -n '__option_not_present -l --long-option'
complete -c gogo:complete -s a -l arguments --description "A list of possible arguments" -n '__option_not_present -a --argument'
complete -c gogo:complete -s d -l description --description "Description of this completions" -n '__option_not_present -d --description'
complete -c gogo:complete -s h -l help --description "Display help and exit" -n '__option_not_present -h --help'
complete -c gogo:complete -s n -l condition --description "The completion should only be used if the specified command has a zero exit status"  -n '__option_not_present -n --condition'
complete -c gogo:complete -s e -l erase --description "Remove completion"  -n '__option_not_present -e --erase'

complete -c gogo:history -e
complete -c gogo:history -d "Show and manipulate command history"
complete -c gogo:history -l clear --description "Clear history" -n '__option_not_present --clear'
complete -c gogo:history -l save --description "Save history" -n '__option_not_present --save'

complete -c gogo:setopt -e
complete -c gogo:setopt -d "Set or view set shell options"
complete -c gogo:setopt -a '__set_unset_arguments'

complete -c gogo:unsetopt -e
complete -c gogo:unsetopt -d "Unset or view unset shell options"
complete -c gogo:unsetopt -a '__set_unset_arguments'

complete -c gogo:cat -e
complete -c gogo:cat -d "Concatenate and print files"
complete -c gogo:cat -s n "Number the output lines, starting at 1"
complete -c gogo:cat -a '__files'

complete -c gogo:pwd -e
complete -c gogo:pwd -d "Get current directory"

complete -c gogo:ls -e
complete -c gogo:ls -d "List files"

complete -c gogo:cd -e
complete -c gogo:cd -d "Change current directory"
complete -c gogo:cd -a '__directories'

complete -c gogo:sleep -e
complete -c gogo:sleep -d "Pause execution for the specified amount of time"

complete -c gogo:echo -e
complete -c gogo:echo -d "Write arguments to the standard output"
complete -c gogo:echo -s n -d "No trailing new line"

complete -c gogo:grep -e
complete -c gogo:grep -d "File pattern searcher"
# TODO

complete -c gogo:sort -e
complete -c gogo:sort -d "Sort lines of text files"
# TODO

complete -c gogo:gosh -e
complete -c gogo:gosh -d "Execute script with arguments in a new session"
# TODO

complete -c gogo:sh -e
complete -c gogo:sh -d "Execute script with arguments in a new session"
# TODO

complete -c gogo:source -e
complete -c gogo:source -d "Execute script with arguments"
# TODO

# TODO: format getopt new set tac type addcommand removeCommand eval

complete -c gogo:each -e
complete -c gogo:each -d "Loop and execute script on the specified elements"

complete -c gogo:if -e
complete -c gogo:if -d "Conditionaly execute a script"

complete -c gogo:not -e
complete -c gogo:not -d "Negates the result of a script"

complete -c gogo:throw -e
complete -c gogo:throw -d "Throws an exception"

complete -c gogo:try -e
complete -c gogo:try -d "Try executing a script and catch any exception"

complete -c gogo:until -e
complete -c gogo:until -d "Loop and execute script until a condition is satisfied"

complete -c gogo:while -e
complete -c gogo:while -d "Loop and execute script while a condition is satisfied"

complete -c gogo:less -e
complete -c gogo:less -d "File pager"
complete -c gogo:less -s e -l quit-at-eof --description "Exit on second EOF"
complete -c gogo:less -s E -l QUIT-AT-EOF --description "Exit on EOF"
complete -c gogo:less -s q -l quiet -l silent --description "Silent mode"
complete -c gogo:less -s Q -l QUIET -l SILENT --description "Completely  silent"
complete -c gogo:less -s S -l chop-long-lines --description "Do not fold long lines"
complete -c gogo:less -s i -l ignore-case --description "Search ignores lowercase case"
complete -c gogo:less -s I -l IGNORE-CASE --description "Search ignores all case"
complete -c gogo:less -s x -l tabs --description "Set tab stops"
complete -c gogo:less -s N -l LINE-NUMBERS --description "Display line number for each line"
complete -c gogo:less -a '__files'

complete -c gogo:nano -e
complete -c gogo:nano -d "File editor"
complete -c gogo:nano -a '__files'

complete -c gogo:keymap -e
complete -c gogo:keymap -d "Manipulate keymaps"
complete -c gogo:keymap -s N --description "Create a new keymap" -n '__option_not_present -N -d -D -l -r -s -A'
complete -c gogo:keymap -s d --description "Delete existing keymaps and reset to default state" -n '__option_not_present -N -d -D -l -r -s -A'
complete -c gogo:keymap -s D --description "Delete named keymaps" -n '__option_not_present -N -d -D -l -r -s -A'
complete -c gogo:keymap -s l --description "List existing keymap names" -n '__option_not_present -N -d -D -l -r -s -A'
complete -c gogo:keymap -s r --description "Unbind specified in-strings" -n '__option_not_present -N -d -D -l -r -s -A'
complete -c gogo:keymap -s s --description "Bind each in-string to each out-string" -n '__option_not_present -N -d -D -l -r -s -A'
complete -c gogo:keymap -s A --description "Create alias to keymap" -n '__option_not_present -N -d -D -l -r -s -A'
complete -c gogo:keymap -s e --description "Select emacs keymap and bind it to main" -n '__option_not_present -e -a -v -M'
complete -c gogo:keymap -s v --description "Select viins keymap and bind it to main" -n '__option_not_present -e -a -v -M'
complete -c gogo:keymap -s a --description "Select vicmd keymap" -n '__option_not_present -e -a -v -M'
complete -c gogo:keymap -s M --description "Specify keymap to select" -n '__option_not_present -e -a -v -M' -a '(keymap -l | tac) split " "'
complete -c gogo:keymap -s R --description "Interpret in-strings as ranges"
complete -c gogo:keymap -s p --description "List bindings which have given key sequence as a a prefix"
complete -c gogo:keymap -s L --description "Output in form of keymap commands"

complete -c gogo:widget -e
complete -c gogo:widget -d "Manipulate widgets"
complete -c gogo:widget -s N --description "Create a new widget" -n '__option_not_present -N -A -D -U -l'
complete -c gogo:widget -s A --description "Create alias to widget" -n '__option_not_present -N -A -D -U -l'
complete -c gogo:widget -s D --description "Delete widgets" -n '__option_not_present -N -A -D -U -l'
complete -c gogo:widget -s U --description "Push characters to the stack" -n '__option_not_present -N -A -D -U -l'
complete -c gogo:widget -s l --description "List user-defined widgets" -n '__option_not_present -N -A -D -U -l'
complete -c gogo:widget -s a --description "With -l, list all widgets" -n '__option_not_present -l'

